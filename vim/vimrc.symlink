" Vim Basics
" ==========

filetype off
set nocompatible

" Enable vim-plug
" ===============

call plug#begin()

" Plugins
" =======

Plug 'airblade/vim-gitgutter'
Plug 'csscomb/vim-csscomb', { 'for': 'css' }
Plug 'ctrlpvim/ctrlp.vim'
Plug 'editorconfig/editorconfig-vim'
Plug 'ervandew/supertab'
Plug 'fatih/vim-go', { 'for': 'go' }
Plug 'flazz/vim-colorschemes'
Plug 'isRuslan/vim-es6'
Plug 'itchyny/lightline.vim'
Plug 'junegunn/vim-easy-align'
Plug 'mattn/emmet-vim'
Plug 'mxw/vim-jsx'
Plug 'sheerun/vim-polyglot'
Plug 'tmux-plugins/vim-tmux-focus-events'
Plug 'tpope/vim-abolish'
Plug 'tpope/vim-commentary'
Plug 'tpope/vim-dispatch'
Plug 'tpope/vim-fugitive'
Plug 'tpope/vim-repeat'
Plug 'tpope/vim-sensible'
Plug 'tpope/vim-surround'

" End vim-plug
" ============

call plug#end()

" Display Settings
" ================

syntax on
syntax enable
set t_Co=256

" Editor Setup
" ============

set breakindent                  " Every wrapped line will continue visually indented
set cindent                      " Use c indent rules
set cmdheight=1                  " Number of screen lines to use for command-line
set cursorline                   " Highlight screen line of cursor with CursorLine
set directory=.,$TEMP            " Directory for swap files
set equalalways                  " Multiple windows, when created, are equal in size
set expandtab                    " Use spaces instead of tabs
set fileformats=unix,mac         " <EOL> formats when (e.g.) starting to edit a new buffer
set hidden                       " Buffers can exist in the background
set hlsearch                     " Highlight search by default
set ignorecase                   " Ignore case of normal letters
set lazyredraw                   " No redraw while executing makros
set linebreak                    " Wrap lines at convenient points
set nobackup                     " Do not create backups of files
set nofoldenable                 " Do not fold by default
set nojoinspaces                 " Join text with only one space
set noswapfile                   " Do not create swap files
set nowrap                       " Don't wrap lines
set nowritebackup                " Do not create backup if a file get's overwritten
set shell=/bin/bash              " Set shell to bash"
set shiftwidth=2                 " Effective value of spaces
set showcmd                      " Show incomplete cmds down the bottom
set showmatch                    " Briefly jump to the matching
set showmode                     " Show current mode down the bottom
set sidescroll=1                 " The minimal number of columns to scroll horizontally
set smartcase                    " A must when searching for stuff
set softtabstop=2                " Number of spaces that a <Tab> counts for
set splitbelow                   " Opens horizontal split below current window
set splitright                   " Opens vertical split right of current window
set synmaxcol=400                " Maximum column in which to search for syntax items.
set tabstop=2                    " Number of spaces that a <Tab> counts for
set textwidth=80                 " Maximum width of text that is being inserted
set title                        " Set window title dynamicaly
set ttyfast                      " Send more characters
set viminfo='1000,<500,:500,/500 " viminfo settings for remembering information

" Indentation Settings
" ====================

filetype indent on
filetype plugin on

" Remap Leader Key
" ================

let mapleader = ","

" Disable Arrow Keys
" ==================

imap <down>  <nop>
imap <left>  <nop>
imap <right> <nop>
imap <up>    <nop>
map  <down>  <nop>
map  <left>  <nop>
map  <right> <nop>
map  <up>    <nop>

" Improved line jumping
" =====================

map j gj
map k gk

" Mappings
" ========

cmap w!! w !sudo tee %
imap jk <Esc>
nmap <leader>gc :Gcommit<cr>
nmap <leader>gd :Gvdiff<cr>
nmap <leader>gj :GitGutterNextHunk<cr>
nmap <leader>gk :GitGutterPrevHunk<cr>
nmap <leader>gs :Gstatus<cr>
nmap <leader>i :set list!<cr>
nmap <leader>p :set invpaste paste?<cr>
nmap <leader>w :update<cr>
nmap <leader>x :bd<cr>
nmap <S-Tab> :bp<cr>
nmap <silent> <leader>r :redraw!<cr>
nmap <Tab> :bn<cr>
nmap n nzzzv
nmap N Nzzzv
vmap <leader>s :sort i<cr>

" Automatically jump to end of pasted text
vnoremap <silent> y y`]
vnoremap <silent> p p`]
nnoremap <silent> p p`]

" Reselect visual block after indent/outdent
vnoremap < <gv
vnoremap > >gv

" Get :help for word under cursor
nnoremap K :help <C-r><C-w><CR>

" Resize splits on window resize
au VimResized * exe "normal! \<c-w>="

" Realign buffers when iterm goes fullscreen
augroup FixProportionsOnResize
  au!
  au VimResized * exe "normal! \<c-w>="
augroup END

" Enable spell in Git commit messages
au BufNewFile,BufRead COMMIT_EDITMSG setlocal spell

" Write file in utf-8 encoding to disk
command W8 :w ++enc=utf-8 %

" Ensure that helptags are generated for the vim help directory
let g:DocPath = expand("$VIMRUNTIME/doc")
let g:DocTags = join([g:DocPath, "tags"], "/")
if !filereadable(g:DocTags)
	execute join(["helptags", g:DocPath])
endif

" Ctrl-P
" ======
let g:ctrlp_map = "<leader><leader>"
let g:ctrlp_user_command = 'ag %s -l --nocolor --hidden -g ""'

" Go
" ==
let g:go_fmt_command = "goimports"
let g:go_fmt_fail_silently = 1
let g:go_highlight_fields = 1
let g:go_highlight_functions = 1
let g:go_highlight_interfaces = 1
let g:go_highlight_methods = 1
let g:go_highlight_operators = 1
let g:go_highlight_structs = 1

" CSS
" ===
au BufEnter *.css set nocindent
au BufLeave *.css set cindent

" JavaScript
" ==========
let g:javascript_enable_domhtmlcss = 1
let g:jsx_ext_required = 0

" EasyAlign
" =========
xmap ga <Plug>(EasyAlign)
nmap ga <Plug>(EasyAlign)

" CSScomb
" =======
autocmd FileType css noremap <buffer> <leader>co :CSScomb<cr>

" Markdown
" ========
let g:vim_markdown_folding_disabled=1
let g:vim_markdown_frontmatter=1

" Editorconfig
" ============
let g:EditorConfig_exclude_patterns = ['fugitive://.*']

" GitGutter
" =========
let g:gitgutter_sign_column_always = 1
let g:gitgutter_eager = 0

" Lightline
" =======
let g:lightline = {'colorscheme': 'PaperColor'}

" Highlighting
" ============

if &term =~ '256color'
  set t_ut=
endif

set background=light
silent! colorscheme PaperColor
