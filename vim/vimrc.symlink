" Vim Basics
" ==========

filetype off
set nocompatible
set encoding=utf-8

" Enable vim-plug
" ===============

call plug#begin()

" Plugins
" =======

Plug 'airblade/vim-gitgutter'
Plug 'csscomb/vim-csscomb', { 'for': 'css' }
Plug 'editorconfig/editorconfig-vim'
Plug 'ervandew/supertab'
Plug 'fatih/vim-go', { 'for': 'go' }
Plug 'flazz/vim-colorschemes'
Plug 'jiangmiao/auto-pairs'
Plug 'jonathanfilip/vim-lucius'
Plug 'junegunn/goyo.vim'
Plug 'junegunn/gv.vim'
Plug 'junegunn/limelight.vim'
Plug 'junegunn/vim-easy-align'
Plug 'kien/ctrlp.vim'
Plug 'mhinz/vim-startify'
Plug 'plasticboy/vim-markdown'
Plug 'rking/ag.vim'
Plug 'robertmeta/nofrils'
Plug 'scrooloose/nerdcommenter'
Plug 'scrooloose/syntastic'
Plug 'sheerun/vim-polyglot'
Plug 'Shougo/neocomplete.vim'
Plug 'takac/vim-hardtime'
Plug 'tmhedberg/matchit'
Plug 'tmux-plugins/vim-tmux-focus-events'
Plug 'tpope/vim-abolish'
Plug 'tpope/vim-fugitive'
Plug 'tpope/vim-repeat'
Plug 'tpope/vim-surround'
Plug 'vim-airline/vim-airline'
Plug 'vim-airline/vim-airline-themes'
Plug 'wakatime/vim-wakatime'

" End vim-plug
" ============

call plug#end()

" Display Settings
" ================

syntax on
syntax enable
set t_Co=256

" Editor Setup
" ============

set autoread                      " Reload files changed outside vim
set backspace=indent,eol,start    " Allow backspace in insert mode
set breakindent                   " Every wrapped line will continue visually indented
set cmdheight=1
set complete=.,w,b,u,t,i,kspell
set cursorline
set directory=.,$TEMP
set fileformats=unix,mac          " <EOL> formats when (e.g.) starting to edit a new buffer
set formatoptions=qrn1            " Reformat text paragraphs or chunks of code
set hidden                        " Buffers can exist in the background
set history=1000                  " Store more command line history
set hlsearch                      " Highlight search by default
set ignorecase
set incsearch                     " Find the next match of current search
set laststatus=2                  " Always show status line
set lazyredraw                    " No redraw while executing makros
set ls=2
set modeline
set number                        " Show line numbers
set numberwidth=4
set relativenumber
set ruler                         " Show the line and column number
set shell=bash
set showcmd                       " Show incomplete cmds down the bottom
set showmatch                     " Briefly jump to the matching
set showmode                      " Show current mode down the bottom
set smartcase                     " A must when searching for stuff
set splitbelow                    " Opens horizontal split below current window
set splitright                    " Opens vertical split right of current window
set textwidth=80
set title
set ttyfast                       " Send more characters
set viminfo                       " Remember information

" Indentation Settings
" ====================

filetype indent on
filetype plugin on
set autoindent     " Copy indent from current line
set cindent        " Use c indent rules
set colorcolumn=+1 " Show vertical wrap position
set expandtab      " Use spaces instead of tabs
set linebreak      " Wrap lines at convenient points
set nojoinspaces   " Join text with only one space
set nosmartindent  " Don't do smart autoindenting when starting a new line
set nowrap         " Don't wrap lines
set shiftwidth=2
set softtabstop=2
set tabstop=2      " Number of spaces that a <Tab> counts for

" Whitespace settings
" ===================

set list listchars=tab:»·,trail:·,nbsp:·

" Disable Swap Files
" ===================

set nobackup
set noswapfile
set nowritebackup
set backupdir=~/.vim-tmp,~/.tmp,~/tmp,/var/tmp,/tmp
set directory=~/.vim-tmp,~/.tmp,~/tmp,/var/tmp,/tmp

" Text Completion
" ===============

set wildmenu                                   " Enhanced completion mode
set wildmode=list:longest
set wildignore+=*.DS_Store                     " OSX
set wildignore+=*.jpg,*.bmp,*.gif,*.png,*.jpeg " Binary images
set wildignore+=*.luac                         " Lua byte code
set wildignore+=*.o,*.obj,*.exe,*.dll          " Compiled object files
set wildignore+=*.sw?                          " Vim swap files
set wildignore+=.hg,.git,.svn                  " version control

" Scrolling
" =========

set scrolloff=8
set sidescrolloff=12
set sidescroll=1

" Movement
" ========
nnoremap <Tab>      :bn<cr>
nnoremap <S-Tab>    :bp<cr>

" Code Folding
" ============
set foldlevel=1       " Start folding on first level
set foldmethod=indent " Fold based on indents
set nofoldenable      " Do not fold by default

" Configuration Files
" ===================

set exrc   " Enable use of directory-specific .vimrc
set secure " Only run autocommands owned by me

" Disable Background Color Erase (tmux)
" ====================================

if &term =~ '256color'
  set t_ut=
endif

" Remap Leader Key
" ================

let mapleader = ","

" Keep search matches in the middle of the window.
nnoremap n nzzzv
nnoremap N Nzzzv

" Mappings
" ========

map <leader><space> /
nmap <leader><leader> :CtrlP<cr>
nmap <leader>b :CtrlPBuffer<cr>
nmap <leader>cd :lcd %:h<cr>
nmap <leader>co :copen<cr>
nmap <leader>cx :ccl<cr>
nmap <leader>e :edit!<cr>
nmap <leader>ev :e $MYVIMRC<cr>
nmap <leader>ga :Git append<cr>
nmap <leader>gc :Gcommit<cr>
nmap <leader>gd :Gdiff<cr>
nmap <leader>gs :Gstatus<cr>
nmap <leader>gt :GitGutterToggle<cr>
nmap <leader>p :set invpaste paste?<cr>
nmap <leader>q :b#<cr>
nmap <leader>sv :source $MYVIMRC<cr>
nmap <leader>W :set invwrap wrap?<cr>
nmap <leader>w :w<cr>
nmap <leader>x :bd<cr>
nmap <silent> <leader>r :redraw!<cr>
nmap <silent> H ^
nmap <silent> L $
nmap <space> :nohlsearch<cr>
vmap <silent> r :w !bash<cr>
vmap <silent> s :sort i<cr>

" Commands
" ========

command! Reload source $MYVIMRC
command! FJ %!python -m json.tool
command! Q q
command! W w
command! WQ wq
cmap w!! w !sudo tee %

" Navigate Splits
" ===============

nnoremap <C-j> <C-w><C-j>
nnoremap <C-k> <C-w><C-k>
nnoremap <C-l> <C-w><C-l>
nnoremap <C-h> <C-w><C-h>

" Long Lines as Break Lines
" =========================

nnoremap j gj
nnoremap k gk

" Automatically jump to end of pasted text
" ========================================

vnoremap <silent> y y`]
vnoremap <silent> p p`]
nnoremap <silent> p p`]

" Reselect visual block after indent/outdent
" ==========================================

vnoremap < <gv
vnoremap > >gv

" Disable Arrow Keys
" ==================

imap <down>  <nop>
imap <left>  <nop>
imap <right> <nop>
imap <up>    <nop>
map  <down>  <nop>
map  <left>  <nop>
map  <right> <nop>
map  <up>    <nop>

" Edtor Events
" ============

" When vimrc is edited, reload it
au! bufwritepost .vimrc source %

" Resize splits on window resize
au VimResized * exe "normal! \<c-w>="

" Set vim to save the file on focus out
" au FocusLost * :wa

" Remember cursor position of the last editing
" and jump to it when opening the same file again
if has("autocmd")
  autocmd BufReadPost * if line("'\"") | exe "'\"" | endif
endif

" Realign buffers when iterm goes fullscreen
augroup FixProportionsOnResize
  au!
  au VimResized * exe "normal! \<c-w>="
augroup END

" Enable spell in Git commit messages
au BufNewFile,BufRead COMMIT_EDITMSG setlocal spell

" Filetypes
" =========

" CSS
" ===
au BufEnter *.css set nocindent
au BufLeave *.css set cindent
autocmd BufRead,BufNewFile *.styl set filetype=css

" JS
" ==
let g:syntastic_javascript_checkers = ['standard']

" Plugins
" =======

" Ctrl-P
" ======
let g:ctrlp_user_command = 'ag %s -l --nocolor --hidden -g ""'

" EasyAlign
" =========
xmap ga <Plug>(EasyAlign)
nmap ga <Plug>(EasyAlign)

" Syntastic
" =========
let g:syntastic_always_populate_loc_list = 1
let g:syntastic_auto_loc_list = 1
let g:syntastic_check_on_open = 1
let g:syntastic_check_on_wq = 0
let g:syntastic_loc_list_height = 5

set statusline+=%#warningmsg#
set statusline+=%{SyntasticStatuslineFlag()}
set statusline+=%*

" Neocomplete
" ===========
let g:acp_enableAtStartup = 0                           " Disable AutoComplPop
let g:neocomplete#enable_at_startup = 1                 " Use neocomplete
let g:neocomplete#enable_smart_case = 1                 " Use smartcase
let g:neocomplete#sources#syntax#min_keyword_length = 3 " Set minimum syntax keyword length

" Hardtime
" ========
let g:hardtime_default_on = 0
let g:hardtime_ignore_quickfix = 1
let g:hardtime_maxcount = 2

" Vim-Go
" ======
au FileType go nmap <leader>b <Plug>(go-build)
au FileType go nmap <leader>c <Plug>(go-coverage)
au FileType go nmap <Leader>gb <Plug>(go-doc-browser)
au FileType go nmap <leader>r <Plug>(go-run)
au FileType go nmap <leader>t <Plug>(go-test)
let g:go_fmt_command = "goimports"
let g:go_fmt_fail_silently = 1

" CSScomb
" =======
autocmd FileType css noremap <buffer> <leader>co :CSScomb<cr>
autocmd BufWritePre,FileWritePre *.css,*.less,*.scss,*.sass,*.styl silent! :CSScomb<cr>

" Markdown
" ========
let g:vim_markdown_folding_disabled=1
let g:vim_markdown_frontmatter=1

" Editorconfig
" ============
let g:EditorConfig_exclude_patterns = ['fugitive://.*']

" GitGutter
" =========
let g:gitgutter_sign_column_always = 1
let g:gitgutter_eager = 0
highlight Comment cterm=italic

" Airline
" =======
let g:airline_powerline_fonts = 0
let g:airline_theme = 'lucius'
if !exists('g:airline_symbols')
  let g:airline_symbols = {}
endif
let g:airline_left_sep = ''
let g:airline_right_sep = ''
let g:airline_symbols.linenr = '¶'
let g:airline_symbols.branch = '⎇'
let g:airline_symbols.paste = 'ρ'
let g:airline_symbols.whitespace = 'Ξ'

" Colorscheme
" ===========

let g:hybrid_use_Xresources = 1
set background=dark
silent! colorscheme lucius

" MacVim
" ======

set guifont=CamingoCode:h19
set linespace=5
